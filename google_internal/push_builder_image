#!/usr/bin/env bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Return an image:tag for the specified builder docker image
#     Given the input files (Dockerfile, configs, installation scripts etc) for building the docker
#     image, first generate a hash of the file contents (ie. exclude timestamps, file ownership etc).
#     This hash will be used as the image tag

set -o pipefail
set -o errexit

declare -r REPO=us-docker.pkg.dev/kiwi-air-force-remote-build
declare -r TEST_IMAGE=privacysandbox/builders/build-debian
declare -r -a IMAGE_LIST=(
  "build-debian"
  "build-amazonlinux2"
  "presubmit"
  "release"
  "test-tools"
  "utils"
)

usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
    --verbose            Verbose mode
    --image <name>       Image name for the build runtime. Valid names:
USAGE

  for elem in "${IMAGE_LIST[@]}"; do
    printf "                             *  %s\n" "${elem}" &>/dev/stderr
  done

  cat &>/dev/stderr << USAGE
    --image-tagged <uri> docker image URI

Environment variables (all optional):
    WORKSPACE            Full path to the workspace (repo root)
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --image-tagged)
      IMAGE_TAGGED="$2"
      shift 2
      ;;
    --image)
      IMG="$2"
      shift 2
      ;;
    --verbose)
      set -o xtrace
      shift
      ;;
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      ;;
  esac
done

WORKSPACE="${WORKSPACE-"$(git rev-parse --show-toplevel)"}"

if [[ -z ${IMG} ]] && [[ -z ${IMAGE_TAGGED} ]]; then
  printf -- "error: --image or --image-tagged must be specified\n" &>/dev/stderr
  usage 1
fi

if [[ -z ${IMAGE_TAGGED} ]]; then
  # shellcheck disable=SC2076
  if ! [[ " ${IMAGE_LIST[*]} " =~ " ${IMG} " ]]; then
    printf -- "error: image [%s] not recognized\n" "${IMG}" &>/dev/stderr
    usage 1
  fi
  IMAGE_TAGGED="$("${WORKSPACE}"/builders/tools/get-builder-image-tagged --image "${IMG}")"
fi
readonly IMAGE_TAGGED
declare -r REPO_IMAGE_TAGGED="${REPO}/${IMAGE_TAGGED}"

# test ability to connect with repo
declare -r REPO_IMAGE_DEBIAN="${REPO}/${TEST_IMAGE}"
if ! gcloud artifacts docker images list "${REPO_IMAGE_DEBIAN}" --include-tags --limit 1 &>/dev/null; then
  printf "Error connecting to Artifact Registry [%s]\n" "${REPO_IMAGE_DEBIAN}" &>/dev/stderr
  exit 1
fi

for TAG in "${REPO_IMAGE_TAGGED}" "${IMAGE_TAGGED%:*}:latest"; do
  docker tag "${IMAGE_TAGGED}" "${TAG}"
done
docker push "${REPO_IMAGE_TAGGED}"
