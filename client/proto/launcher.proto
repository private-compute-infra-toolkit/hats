// Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pcit.client;

import "tvs/proto/tvs_messages.proto";
import "google/protobuf/empty.proto";

message FetchOrchestratorMetadataResponse {
  bytes tee_certificate = 1;
  // Authentication key to use in the noise protocol when talking to the TVS
  // server.
  bytes tvs_authentication_key = 2;

  PrivateKeyWrappingKeys private_key_wrapping_keys = 3;
}

message PrivateKeyWrappingKeys {
  // Symmetric key used for encrypting the generated private key before
  // splitting and sending to TVS. Also used for decrypting during key
  // retrieval.
  bytes primary = 1;

  // Additional keys to try to use when decrypting with the primary key fails.
  // This can happen / is useful for rotating the wrapping key.
  repeated bytes active = 2;
}

message ForwardingTvsMessage {
  int64 tvs_id = 1;
  tvs.OpaqueMessage opaque_message = 2;
}

service LauncherService {
  // Provides chip endorsement key for DICE verification purpose to
  // orchestrator.
  rpc FetchOrchestratorMetadata(google.protobuf.Empty)
      returns (FetchOrchestratorMetadataResponse);
  // Proxies messages between the orchestrator and a TVS service.
  rpc VerifyReport(stream ForwardingTvsMessage)
      returns (stream tvs.OpaqueMessage);
}
