diff --git a/oak_containers_syslogd/BUILD b/oak_containers_syslogd/BUILD
index 6d16b4bc89..a450e03e69 100644
--- oak_containers/syslogd/BUILD
+++ oak_containers/syslogd/BUILD
@@ -15,6 +15,7 @@
 #
 
 load("@rules_rust//rust:defs.bzl", "rust_binary")
+load("@rules_rust//cargo:defs.bzl", "cargo_build_script")
 
 package(
     default_visibility = ["//visibility:public"],
@@ -27,8 +28,8 @@ rust_binary(
     crate_features = ["bazel"],
     # TODO: b/335717840 - Fix systemd linker issue and remove this tag.
     tags = ["noci"],
-    target_compatible_with = ["@platforms//:incompatible"],
     deps = [
+        ":build",
         "//oak_containers_orchestrator:lib",
         "@oak_crates_index//:anyhow",
         "@oak_crates_index//:bitflags",
@@ -41,6 +42,12 @@ rust_binary(
         "@oak_crates_index//:signal-hook-tokio",
         "@oak_crates_index//:tokio",
         "@oak_crates_index//:tokio-stream",
-        "@systemd",
+    ],
+)
+
+cargo_build_script(
+    name = "build",
+    srcs = ["build.rs"],
+    deps = [
     ],
 )
diff --git a/oak_containers_syslogd/build.rs b/oak_containers_syslogd/build.rs
new file mode 100644
index 0000000000..aad5b46404
--- /dev/null
+++ oak_containers_syslogd/build.rs
@@ -0,0 +1,27 @@
+use std::fs;
+use std::path::Path;
+use std::env;
+
+fn get_systemd_so_location() -> Result<String, String> {
+    let paths = fs::read_dir("/usr/lib/x86_64-linux-gnu").unwrap();
+    for path in paths {
+        let path = path.unwrap().path();
+        let path_str = path.to_str().unwrap();
+        if path_str.contains("libsystemd.so") {
+            return Ok(path_str.to_string());
+        }
+    }
+    Err("systemd not found".to_string())
+}
+
+fn main() {
+    let systemd = get_systemd_so_location().unwrap();
+    let out_dir = env::var("OUT_DIR").unwrap();
+    let link = Path::join(Path::new(&out_dir), "libsystemd.so");
+    std::os::unix::fs::symlink(systemd, &link).unwrap();
+
+    println!("cargo:rerun-if-env-changed=OUT_DIR");
+    println!("cargo:rerun-if-changed=build.rs");
+    println!("cargo:rustc-link-search=native={out_dir}");
+    println!("cargo:rustc-link-lib=systemd");
+}
