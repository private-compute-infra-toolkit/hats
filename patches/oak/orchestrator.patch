diff --git a/oak_containers/orchestrator/src/crypto.rs b/oak_containers/orchestrator/src/crypto.rs
index 47fac04a4..ff28f536d 100644
--- oak_containers/orchestrator/src/crypto.rs
+++ oak_containers/orchestrator/src/crypto.rs
@@ -42,7 +42,7 @@ pub fn generate_instance_keys() -> (InstanceKeys, InstancePublicKeys) {
 
 pub struct InstanceKeys {
     encryption_key: EncryptionKey,
-    signing_key: p256::ecdsa::SigningKey,
+    pub signing_key: p256::ecdsa::SigningKey,
 }
 
 pub struct InstancePublicKeys {
@@ -98,7 +98,7 @@ impl GroupKeys {
     }
 }
 
-pub(crate) struct CryptoService {
+pub struct CryptoService {
     instance_keys: InstanceKeys,
     group_keys: Arc<GroupKeys>,
 }

diff --git a/oak_containers/orchestrator/src/ipc_server.rs b/oak_containers/orchestrator/src/ipc_server.rs
index d8fa79b86..67c42e6c0 100644
--- oak_containers/orchestrator/src/ipc_server.rs
+++ oak_containers/orchestrator/src/ipc_server.rs
@@ -72,6 +72,25 @@ impl Orchestrator for ServiceImplementation {
     }
 }
 
+pub async fn create_services(
+    evidence: Evidence,
+    endorsements: Endorsements,
+    instance_keys: InstanceKeys,
+    group_keys: Arc<GroupKeys>,
+    application_config: Vec<u8>,
+    launcher_client: Arc<LauncherClient>,
+    ) -> Result<(OrchestratorServer<ServiceImplementation>, OrchestratorCryptoServer<CryptoService>), anyhow::Error> {
+    let service_instance = ServiceImplementation {
+        // TODO(#4442): Remove once apps use the new crypto service.
+        application_config,
+        launcher_client,
+        evidence,
+        endorsements,
+    };
+    let crypto_service_instance = CryptoService::new(instance_keys, group_keys);
+     Ok((OrchestratorServer::new(service_instance), OrchestratorCryptoServer::new(crypto_service_instance)))
+}
+
 #[allow(clippy::too_many_arguments)]
 pub async fn create<P>(
     socket_address: P,

