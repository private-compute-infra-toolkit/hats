diff --git a/crypto/BUILD b/crypto/BUILD
new file mode 100644
index 0000000..38243ed
--- /dev/null
+++ crypto/BUILD
@@ -0,0 +1,14 @@
+load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test", "rust_binary")
+
+package (
+    default_visibility = ["//visibility:public"],
+)
+
+rust_library(
+    name = "crypto",
+    srcs = glob(["src/**"]),
+    deps = [
+        "@boringssl//rust/bssl-crypto:bssl-crypto",
+    ],
+    crate_features=["bssl"],
+)
diff --git a/crypto/src/lib.rs b/crypto/src/lib.rs
index 1f9c435..ef387ce 100644
--- crypto/src/lib.rs
+++ crypto/src/lib.rs
@@ -52,8 +52,9 @@ pub use crate::ringimpl::{
 #[cfg(feature = "bssl")]
 pub use crate::bsslimpl::{
     aes_128_gcm_open_in_place, aes_128_gcm_seal_in_place, aes_256_gcm_open_in_place,
-    aes_256_gcm_seal_in_place, ecdsa_verify, hkdf_sha256, hmac_sha256, p256_scalar_mult, rand_bytes, rsa_verify,
-    sha1_two_part, sha256, sha256_two_part, EcdsaKeyPair, P256Scalar, RsaKeyPair,
+    aes_256_gcm_seal_in_place, ecdsa_verify, hkdf_sha256, hmac_sha256, p256_scalar_mult,
+    rand_bytes, rsa_verify, sha1_two_part, sha256, sha256_two_part, EcdsaKeyPair, P256Scalar,
+    RsaKeyPair,
 };
 
 #[cfg(feature = "rustcrypto")]
@@ -519,6 +520,8 @@ mod bsslimpl {
     };
     use alloc::vec::Vec;
     use bssl_crypto::aead::{Aead, Aes128Gcm, Aes256Gcm};
+    use bssl_crypto::digest::Algorithm;
+    use bssl_crypto::digest::WithOutputLength;
     use bssl_crypto::ec::P256;
     use bssl_crypto::hkdf::HkdfSha256;
     use bssl_crypto::hmac::HmacSha256;
diff --git a/handshake/BUILD b/handshake/BUILD
new file mode 100644
index 0000000..09dd336
--- /dev/null
+++ handshake/BUILD
@@ -0,0 +1,15 @@
+load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test", "rust_binary")
+
+package (
+    default_visibility = ["//visibility:public"],
+)
+
+rust_library(
+    name = "handshake",
+    srcs = glob(["src/**"]),
+    deps = [
+        "//crypto:crypto",
+        "@enclave_crate_index//:static_assertions",
+    ],
+    # crate_features=["bssl"],
+)
