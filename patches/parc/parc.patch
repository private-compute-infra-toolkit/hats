index 3a97df9d..e1474748 100644
--- BUILD.bazel
+++ BUILD.bazel
@@ -153,3 +153,15 @@ filegroup(
     name = "clang_tidy_config",
     srcs = [".clang-tidy"],
 )
+
+alias(
+    name = "local_parc_server",
+    actual = "//src/parc/servers/local:parc_server",
+    visibility = ["//visibility:public"],
+)
+
+alias(
+    name = "local_parameters",
+    actual = "//src/parc/servers/local:parameters",
+    visibility = ["//visibility:public"],
+)
diff --git a/src/parc/servers/local/parameters.cc b/src/parc/servers/local/parameters.cc
index 5d817383..7eb4fa62 100644
--- src/parc/servers/local/parameters.cc
+++ src/parc/servers/local/parameters.cc
@@ -29,24 +29,24 @@ absl::StatusOr<Parameters> Parameters::Create(
     const std::filesystem::path& parameters_file_path) {
   if (!std::filesystem::exists(parameters_file_path)) {
     return absl::NotFoundError(absl::StrCat("Parameters file [",
-                                            parameters_file_path.u8string(),
+                                            parameters_file_path.string(),
                                             "] could not be found."));
   }
   if (!std::filesystem::is_regular_file(parameters_file_path)) {
     return absl::InvalidArgumentError(
-        absl::StrCat("Parameters file [", parameters_file_path.u8string(),
+        absl::StrCat("Parameters file [", parameters_file_path.string(),
                      "] is not a regular file."));
   }
   std::ifstream parameters_file(parameters_file_path);
   if (!parameters_file.is_open()) {
     return absl::InternalError(absl::StrCat("Error opening parameters file [",
-                                            parameters_file_path.u8string(),
+                                            parameters_file_path.string(),
                                             "]."));
   }
 
   Parameters parameters;
   nlohmann::json data = nlohmann::json::parse(parameters_file);
-  LOG(INFO) << "Loading parameters from : [" << parameters_file_path.u8string()
+  LOG(INFO) << "Loading parameters from : [" << parameters_file_path.string()
             << "].";
   for (const auto& item : data.items()) {
     if (item.value().type() == nlohmann::json::value_t::string) {

--- src/parc/servers/local/parc_server.cc
+++ src/parc/servers/local/parc_server.cc
@@ -73,7 +73,7 @@ grpc::ServerWriteReactor<GetBlobResponse>* ParcServer::GetBlob(
         LOG(ERROR) << "Error opening file: " << file_path;
         Finish(grpc::Status(
             grpc::StatusCode::NOT_FOUND,
-            absl::StrCat("File [", file_path.u8string(), "] not found")));
+            absl::StrCat("File [", file_path.string(), "] not found")));
         return;
       }
 
@@ -230,8 +230,8 @@ grpc::ServerUnaryReactor* ParcServer::ListBlobsMetadata(
       // including subdirectories and file extension. StripPrefix removes
       // `blob_storage_root`, `bucket_name`, and the forward slash.
       metadata->set_blob_name(absl::StripPrefix(
-          blob_path.u8string(),
-          absl::StrCat(blob_storage_root_and_bucket.u8string(), "/")));
+          blob_path.string(),
+          absl::StrCat(blob_storage_root_and_bucket.string(), "/")));
       if (blob.is_regular_file()) {
         metadata->set_blob_size(blob.file_size());
       }
@@ -258,12 +258,12 @@ grpc::ServerUnaryReactor* ParcServer::GetBlobMetadata(
   if (!dir_entry.exists()) {
     reactor->Finish(grpc::Status(
         grpc::StatusCode::INTERNAL,
-        absl::StrCat("File [", file_path.u8string(), "] is not found.")));
+        absl::StrCat("File [", file_path.string(), "] is not found.")));
     return reactor;
   } else if (!(dir_entry.is_directory() || dir_entry.is_regular_file())) {
     reactor->Finish(grpc::Status(
         grpc::StatusCode::INTERNAL,
-        absl::StrCat("File [", file_path.u8string(), "] is not a blob.")));
+        absl::StrCat("File [", file_path.string(), "] is not a blob.")));
     return reactor;
   } else if (dir_entry.is_regular_file()) {
     LOG(INFO) << "Opening file: " << file_path;
@@ -271,7 +271,7 @@ grpc::ServerUnaryReactor* ParcServer::GetBlobMetadata(
     if (!file_stream.is_open()) {
       LOG(ERROR) << "Error opening file: " << file_path;
       reactor->Finish(grpc::Status(grpc::StatusCode::INTERNAL,
-                                   absl::StrCat("File [", file_path.u8string(),
+                                   absl::StrCat("File [", file_path.string(),
                                                 "] could not be opened.")));
       return reactor;
     }
