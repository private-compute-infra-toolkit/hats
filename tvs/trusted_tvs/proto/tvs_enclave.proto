// Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package privacy_sandbox.tvs;

import "google/protobuf/empty.proto";

service TvsEnclave {
  // Provision keys/secrets to the enclave. The method must be called at startup
  // in order for the enclave to function.
  // method_id: 1
  rpc ProvisionKeys(ProvisionKeysRequest) returns (.google.protobuf.Empty);

  // Load appraisal policies to the enclave. The method must be called at
  // startup.
  // method_id: 2
  rpc LoadAppraisalPolicies(LoadAppraisalPoliciesRequest)
      returns (.google.protobuf.Empty);

  // Register or update user. The user must be registered before using the TVS.
  // method_id: 3
  rpc RegisterOrUpdateUser(RegisterOrUpdateUserRequest)
      returns (.google.protobuf.Empty);

  // Create a session with the enclave.
  // method_id: 4
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);

  // Validate attestation report, and return user's secret if successful.
  // method_id: 5
  rpc DoCommand(DoCommandRequest) returns (DoCommandResponse);

  // Tear down the session.
  // method_id: 6
  rpc TerminateSession(TerminateSessionRequest)
      returns (.google.protobuf.Empty);
}

message ProvisionKeysRequest {
  bytes private_key = 1;
}

message LoadAppraisalPoliciesRequest {
  bytes policies = 1;
}

message RegisterOrUpdateUserRequest {
  bytes id = 1;
  bytes authentication_key = 2;
  bytes secret = 3;
}

message CreateSessionRequest {
  bytes binary_message = 1;
}

message CreateSessionResponse {
  bytes session_id = 1;
  bytes binary_message = 2;
}

message DoCommandRequest {
  bytes session_id = 1;
  bytes binary_message = 2;
}

message DoCommandResponse {
  bytes binary_message = 1;
}

message TerminateSessionRequest {
  bytes session_id = 1;
}
